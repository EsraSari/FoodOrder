// <auto-generated />
using System;
using FoodOrderDAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodOrderDAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240504085427_InitFoodOrders")]
    partial class InitFoodOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodOrderDomain.AddressInformations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<int?>("CountyID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CountyID");

                    b.HasIndex("CustomerID");

                    b.ToTable("AddressInformations");
                });

            modelBuilder.Entity("FoodOrderDomain.Categories", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1904),
                            CategoryName = "Yiyecek",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1905),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1906),
                            CategoryName = "İçecek",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1907),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Cities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1425),
                            CityName = "İstanbul",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1425),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1427),
                            CityName = "Ankara",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1428),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1429),
                            CityName = "İzmir",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1430),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1432),
                            CityName = "Bursa",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1432),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1434),
                            CityName = "Antalya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1434),
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1436),
                            CityName = "Adana",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1436),
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1438),
                            CityName = "Konya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1439),
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1440),
                            CityName = "Kayseri",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1441),
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1443),
                            CityName = "Mersin",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1443),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.ContactInformations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ContactTypeID");

                    b.HasIndex("CustomerID");

                    b.ToTable("ContactInformations");
                });

            modelBuilder.Entity("FoodOrderDomain.ContactTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("ContactTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2377),
                            ContactType = "Cep Telefonu",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2377),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2406),
                            ContactType = "E-mail",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2407),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Counties", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1545),
                            CityID = 1,
                            CountyName = "Kağıthane",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1545),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1547),
                            CityID = 1,
                            CountyName = "Şişli",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1547),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1549),
                            CityID = 1,
                            CountyName = "Beşiktaş",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1550),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1551),
                            CityID = 1,
                            CountyName = "Beyoğlu",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1552),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1554),
                            CityID = 1,
                            CountyName = "Kadıköy",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1554),
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1556),
                            CityID = 1,
                            CountyName = "Üsküdar",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1556),
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1558),
                            CityID = 1,
                            CountyName = "Fatih",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1558),
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1560),
                            CityID = 1,
                            CountyName = "Bakırköy",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1560),
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1562),
                            CityID = 1,
                            CountyName = "Maltepe",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1563),
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1564),
                            CityID = 1,
                            CountyName = "Ataşehir",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1565),
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1566),
                            CityID = 1,
                            CountyName = "Büyükçekmece",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1567),
                            Status = true
                        },
                        new
                        {
                            ID = 12,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1569),
                            CityID = 1,
                            CountyName = "Sarıyer",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1569),
                            Status = true
                        },
                        new
                        {
                            ID = 13,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1571),
                            CityID = 1,
                            CountyName = "Kartal",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1571),
                            Status = true
                        },
                        new
                        {
                            ID = 14,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1573),
                            CityID = 1,
                            CountyName = "Şile",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1573),
                            Status = true
                        },
                        new
                        {
                            ID = 15,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1575),
                            CityID = 1,
                            CountyName = "Çatalca",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1575),
                            Status = true
                        },
                        new
                        {
                            ID = 16,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1577),
                            CityID = 1,
                            CountyName = "Adalar",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1577),
                            Status = true
                        },
                        new
                        {
                            ID = 17,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1579),
                            CityID = 2,
                            CountyName = "Altındağ",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1579),
                            Status = true
                        },
                        new
                        {
                            ID = 18,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1581),
                            CityID = 2,
                            CountyName = "Ayaş",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1582),
                            Status = true
                        },
                        new
                        {
                            ID = 19,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1583),
                            CityID = 2,
                            CountyName = "Bala",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1584),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Countries", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1683),
                            CountryName = "Türkiye",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1683),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1685),
                            CountryName = "Almanya",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1685),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1687),
                            CountryName = "Fransa",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1688),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1690),
                            CountryName = "İngiltere",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1690),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1692),
                            CountryName = "İtalya",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1692),
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1694),
                            CountryName = "İspanya",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1695),
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1696),
                            CountryName = "Türkiye",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1697),
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1698),
                            CountryName = "Ukrayna",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1699),
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1700),
                            CountryName = "Polonya",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1701),
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1702),
                            CountryName = "Romanya",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1703),
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1704),
                            CountryName = "Hollanda",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1705),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Customers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("GenderID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FoodOrderDomain.Genders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1795),
                            Gender = "Kadın",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1795),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1797),
                            Gender = "Erkek",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1797),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.ItemTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("ItemTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2545),
                            ItemName = "Ürün",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2545),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2547),
                            ItemName = "Menü",
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2548),
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllergen")
                        .HasColumnType("bit");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("FoodOrderDomain.OrderDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("ItemTypeID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("FoodOrderDomain.OrderStates", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("OrderStates");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1096),
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1096),
                            OrderState = "Hazırlanıyor",
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1098),
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1099),
                            OrderState = "Teslim Edildi",
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1101),
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1101),
                            OrderState = "İptal Edildi",
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Orders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int?>("ContactID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStateID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderStateID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodOrderDomain.PaymentMethods", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1301),
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1301),
                            PaymentName = "Kredi/Banka Kartı",
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1303),
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(1303),
                            PaymentName = "Nakit",
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.ProductDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("FoodOrderDomain.ProductMenu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("MenuID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductMenu");
                });

            modelBuilder.Entity("FoodOrderDomain.Products", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductDetailID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2001),
                            CategoryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2002),
                            PreparationTime = 5,
                            Price = 15m,
                            ProductDetailID = 0,
                            ProductName = "Patates",
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2004),
                            CategoryID = 2,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2004),
                            PreparationTime = 0,
                            Price = 10m,
                            ProductDetailID = 0,
                            ProductName = "Kola",
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2007),
                            CategoryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2008),
                            PreparationTime = 0,
                            Price = 0m,
                            ProductDetailID = 0,
                            ProductName = "Ketçap",
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2010),
                            CategoryID = 1,
                            ModifiedDate = new DateTime(2024, 5, 4, 11, 54, 26, 808, DateTimeKind.Local).AddTicks(2010),
                            PreparationTime = 0,
                            Price = 0m,
                            ProductDetailID = 0,
                            ProductName = "Mayonez",
                            Status = true
                        });
                });

            modelBuilder.Entity("FoodOrderDomain.Stock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<bool>("StockStatus")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("MenuID")
                        .IsUnique();

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("FoodOrderDomain.AddressInformations", b =>
                {
                    b.HasOne("FoodOrderDomain.Cities", "City")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CityID");

                    b.HasOne("FoodOrderDomain.Countries", "Country")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CountryID");

                    b.HasOne("FoodOrderDomain.Counties", "County")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CountyID");

                    b.HasOne("FoodOrderDomain.Customers", "Customer")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("County");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodOrderDomain.Cities", b =>
                {
                    b.HasOne("FoodOrderDomain.Countries", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FoodOrderDomain.ContactInformations", b =>
                {
                    b.HasOne("FoodOrderDomain.ContactTypes", "ContactType")
                        .WithMany("ContactInfo")
                        .HasForeignKey("ContactTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.Customers", "Customer")
                        .WithMany("ContactInfo")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodOrderDomain.Counties", b =>
                {
                    b.HasOne("FoodOrderDomain.Cities", "City")
                        .WithMany("County")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("FoodOrderDomain.Customers", b =>
                {
                    b.HasOne("FoodOrderDomain.Genders", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("FoodOrderDomain.OrderDetails", b =>
                {
                    b.HasOne("FoodOrderDomain.Menu", "Menu")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.ItemTypes", "ItemType")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");

                    b.Navigation("Menu");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodOrderDomain.Orders", b =>
                {
                    b.HasOne("FoodOrderDomain.AddressInformations", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.ContactInformations", "ContactInfo")
                        .WithMany("Orders")
                        .HasForeignKey("ContactID");

                    b.HasOne("FoodOrderDomain.Customers", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("FoodOrderDomain.OrderStates", "OrderState")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.PaymentMethods", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ContactInfo");

                    b.Navigation("Customer");

                    b.Navigation("OrderState");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("FoodOrderDomain.ProductDetails", b =>
                {
                    b.HasOne("FoodOrderDomain.Products", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("FoodOrderDomain.ProductDetails", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodOrderDomain.ProductMenu", b =>
                {
                    b.HasOne("FoodOrderDomain.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodOrderDomain.Products", b =>
                {
                    b.HasOne("FoodOrderDomain.Categories", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FoodOrderDomain.Stock", b =>
                {
                    b.HasOne("FoodOrderDomain.Menu", "Menu")
                        .WithOne("Stock")
                        .HasForeignKey("FoodOrderDomain.Stock", "MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderDomain.Products", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("FoodOrderDomain.Stock", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodOrderDomain.AddressInformations", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderDomain.Categories", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodOrderDomain.Cities", b =>
                {
                    b.Navigation("AddressInfo");

                    b.Navigation("County");
                });

            modelBuilder.Entity("FoodOrderDomain.ContactInformations", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderDomain.ContactTypes", b =>
                {
                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("FoodOrderDomain.Counties", b =>
                {
                    b.Navigation("AddressInfo");
                });

            modelBuilder.Entity("FoodOrderDomain.Countries", b =>
                {
                    b.Navigation("AddressInfo");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FoodOrderDomain.Customers", b =>
                {
                    b.Navigation("AddressInfo");

                    b.Navigation("ContactInfo");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderDomain.Genders", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FoodOrderDomain.ItemTypes", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FoodOrderDomain.Menu", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodOrderDomain.OrderStates", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderDomain.Orders", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FoodOrderDomain.PaymentMethods", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderDomain.Products", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductDetail")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
